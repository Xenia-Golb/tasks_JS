function countPaths(N, M) {
    const board = new Array(N * M).fill(0); // Инициализируем массив размером N * M
    let dp = [0]; // Начальное состояние для dp

    // Заполняем начальные значения
    dp[0] = 1;

    // Инициализируем dp для всех клеток
    for (let i = 0; i < N * M; ++i) {
        if (i === 0 || i === N * M - 1) {
            // Если это начальная или конечная клетка, добавляем 1
            dp[i + 1] = dp[i] + 1;
        } else {
            // Иначе, проверяем, можем ли мы добавить пути из предыдущих клеток
            if (i % M !== 0 && dp[i - 1] > 0) {
                dp[i + 1] += dp[i - 1];
            }
            if ((i + 1) % M !== 0 && dp[i - M] > 0) {
                dp[i + 1] += dp[i - M];
            }
            if (((i + 1) / M | 0) !== (i / M | 0) && dp[i - M - 1] > 0) {
                dp[i + 1] += dp[i - M - 1];
            }
            // Уменьшаем количество путей, если король трижды подряд наступил на клетку одного цвета
            if (i >= M && i <= N * M - M - 1 && board[i] === board[i - M] && board[i - 1] === board[i - M - 1]) {
                dp[i + 1] -= dp[i - M - 1];
            }
        }
    }

    // Возвращаем количество путей до конечной клетки по модулю 1000
    return dp[N * M] % 1000;
}

// Чтение входных данных
const [N, M] = readline().split(' ').map(Number);

// Вывод результата
console.log(countPaths(N, M));