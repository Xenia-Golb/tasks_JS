/**
 * Вам даны два отсортированных целочисленных массива nums1 и nums2, нужно поместить все элементы nums2 в nums1 так, чтобы элементы итогового массива остались отсортированными.
 * количество элементов в массивах nums1 и nums2 равны m и n соотвественно;
можно считать, что в массиве nums1 зарезервированно место для всех элементов (n + m) и заполнены нулями;
результат должен сохраниться в переменной nums1, результат функции явно возвращать не обязательно
 */

/**
 * @param {number[]} nums1 - первый отсортированный массив
 * @param {number} m - количество значимых элементов в nums1
 * @param {number[]} nums2 - второй отсортированный массив
 * @param {number} n - количество элементов в nums2
 * @return {void} Не возвращайте ничего, вместо этого модифицируйте nums1.
 */
module.exports = function merge(nums1, m, nums2, n) {
  let i = m - 1; // Указатель на конец nums1
  let j = n - 1; // Указатель на конец nums2
  let k = m + n - 1; // Указатель на конец результирующего массива

  // Пока есть элементы в обоих массивах
  while (i >= 0 && j >= 0) {
    if (nums1[i] > nums2[j]) {
      nums1[k] = nums1[i]; // Записываем элемент из nums1
      i--;
    } else {
      nums1[k] = nums2[j]; // Записываем элемент из nums2
      j--;
    }
    k--;
  }

  // Если в nums2 остались элементы, копируем их
  while (j >= 0) {
    nums1[k] = nums2[j];
    j--;
    k--;
  }
};

// Тестируем
const nums1 = [1, 2, 3, 0, 0, 0];
const nums2 = [2, 5, 6];
merge(nums1, 3, nums2, 3);
console.log(nums1); // [1, 2, 2, 3, 5, 6]
